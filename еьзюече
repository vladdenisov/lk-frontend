&НаСервере
// 1) Диагностика: вывод всех сертификатов для подписи
Процедура ПеречислитьСертификатыДляПодписи(ИзОС = Ложь)
    Сертификаты = ЭлектроннаяПодписьСлужебный.ПолучитьСертификаты("Подписание", ИзОС);
    Если ТипЗнч(Сертификаты) <> Тип("СписокЗначений") Или Сертификаты.Количество() = 0 Тогда
        Сообщить("Сертификаты для подписания не найдены");
        Возврат;
    КонецЕсли;
    Для Каждого Эл Из Сертификаты Цикл
        Сообщить(
          "Имя: "   + Эл.Наименование +
          ", Отпечаток: " + Эл.Отпечаток +
          ", Срок до: "   + Формат(Эл.СрокДействияПо, "ДФ=dd.MM.yyyy") +
          ", Провайдер: " + Эл.Программа
        );
    КонецЦикла;
КонецПроцедуры

Функция ПодготовитьПараметрыСертификата(Сертификат)

ПараметрыСертификата = Новый Структура("Сертификат, СертификатКриптографии, Пароль, МенеджерКриптографии");

ПараметрыСертификата.Сертификат = Сертификат;
Если Не ЗначениеЗаполнено(ПараметрыСертификата.Сертификат) Тогда
Возврат ПараметрыСертификата;
КонецЕсли;

РеквизитыСертификата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыСертификата.Сертификат, "Отпечаток, Программа");
ПараметрыСертификата.СертификатКриптографии = ЭлектроннаяПодписьСлужебный.ПолучитьСертификатПоОтпечатку(РеквизитыСертификата.Отпечаток, Ложь, Ложь);

Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ПараметрыСертификата.Сертификат,"ПаролиСертификатов");
Если ТипЗнч(Данные) <> Тип("Соответствие") Тогда
// todo предлагать вводить пароль пользователю
КонецЕсли;
ПараметрыСертификата.Пароль = Данные.Получить(Пользователи.ТекущийПользователь());

МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("Подписание", Ложь, , РеквизитыСертификата.Программа);
МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ПараметрыСертификата.Пароль;

ПараметрыСертификата.МенеджерКриптографии = МенеджерКриптографии;

Возврат ПараметрыСертификата;

КонецФункции


&НаСервере
// 2) Утилита: по ссылке на сотрудника находит его сертификат
Функция НайтиСертификатСотрудника(СотрудникОбъект) Экспорт
    // Предполагаем, что вы добавили в справочник "Сотрудники" реквизит
    // СертификатПодписи, тип — СправочникСсылка на константу "СертификатPDF"
    Если СотрудникОбъект = Неопределено Тогда
        Возврат Неопределено;
	КонецЕсли;
	
	МенеджерКриптографии = Новый МенеджерКриптографии("", "", 80);
	ХранилищеСертификат = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	СертификатыХранилища = ХранилищеСертификат.ПолучитьВсе();
	
	//МенеджерКриптографии = Новый МенеджерКриптографии("", "", 80);
	//ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	//СертификатыХранилища = ХранилищеСертификатов.ПолучитьВсе();
	Если ТипЗнч(СотрудникОбъект) = Тип("СправочникСсылка.Сотрудники") Тогда
		ФизическоеЛицоПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СотрудникОбъект, "ФизическоеЛицо");
	КонецЕсли;
	
	ОтборОрганизаций = Новый Массив;

	ОтборОрганизацийЗапроса = ОбщегоНазначения.СкопироватьРекурсивно(ОтборОрганизаций);
	ОтборОрганизацийЗапроса.Добавить(Неопределено);
	ОтборОрганизацийЗапроса.Добавить(Справочники.Организации.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтборОрганизаций", ОтборОрганизацийЗапроса);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Ссылка,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.ДействителенДо КАК ДействителенДо,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток КАК Отпечаток,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отозван КАК Отозван,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Организация КАК Организация,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА СертификатыКлючейЭлектроннойПодписиИШифрования.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		КОГДА СертификатыКлючейЭлектроннойПодписиИШифрования.Организация = НЕОПРЕДЕЛЕНО
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЗаполненаОрганизация,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка,
		|	СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка.ДействителенДо,
		|	СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка.Отпечаток,
		|	СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка.Отозван,
		|	СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка.Организация,
		|	СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка.ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		КОГДА СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка.Организация = НЕОПРЕДЕЛЕНО
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка.Организация.ГоловнаяОрганизация
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователи КАК СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи		
		|УПОРЯДОЧИТЬ ПО
		|	ЗаполненаОрганизация УБЫВ,
		|	ГоловнаяОрганизация,
		|	Организация,
		|	ФизическоеЛицо,
		|	ДействителенДо";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		Комментарий = "";
		Если Выборка.ФизическоеЛицо.Ссылка = ФизическоеЛицоПользователя.Ссылка тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;  
	
	Возврат Неопределено;

КонецФункции  

Функция Подписать(Команда)
	
	ПутьКФайлыПодписанный = СтрЗаменить(ПутьКФайлу, ".pdf", "_signed.pdf");
	КопироватьФайл(ПутьКФайлу, ПутьКФайлыПодписанный);
	
	ДанныеСертификата = ДанныеСертификата(Сертификат);
	Штамп = Штамп(ДанныеСертификата.Наименование, ДанныеСертификата.ДанныеСертификата);
	
	МенеджерКриптографии = Новый МенеджерКриптографии(ДанныеСертификата.ИмяПрограммы, "", ДанныеСертификата.ТипПрограммы);
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
	
	ПодписьPDF = Новый ОписаниеПодписиPDF;
	ПодписьPDF.Имя = "ПодписьДоговора";
	ПодписьPDF.Сертификат = Новый СертификатКриптографии(ДанныеСертификата.ДанныеСертификата);
	ПодписьPDF.ТипПодписи = ТипПодписиPDF.Сертифицирующая;
	ПодписьPDF.БлокировкаДокумента = Истина;
	ПодписьPDF.Верх = -10;
	ПодписьPDF.Лево = 50;
	
	ЗаписьPDF = Новый ЗаписьPDF();
	ЗаписьPDF.Открыть(ПутьКФайлыПодписанный);
	
	ЗаписьPDF.ЗаписатьПодпись(МенеджерКриптографии, ПодписьPDF, Штамп);
	ЗаписьPDF.Закрыть();
	
КонецПроцедуры


&НаСервере
// 3) HTTP-функция: принимает JSON { employeeGuid, pdfBase64, docGUID, docType }
Функция signPDFPOST(Запрос) Экспорт
    // a) Читаем тело
    Тело = Запрос.ПолучитьТелоКакСтроку();
    Чт = Новый ЧтениеJSON; Чт.УстановитьСтроку(Тело);
    Данные = ПрочитатьJSON(Чт, Истина);
	
    Если НЕ LK_Utils.ЕстьКлючСоответствия(Данные,"pdfBase64") Тогда
        Возврат Новый HTTPСервисОтвет(400, "Не передано поле pdfBase64");
	КонецЕсли;
	
    // c) Ищем сотрудника
	Сотр = LK_Utils.ПолучитьСотрудникаПоГуид(Запрос.Заголовки.Получить("X-User-Id"));
    Если Сотр = Неопределено Тогда
        Возврат Новый HTTPСервисОтвет(400, "Сотрудник не найден");
    КонецЕсли;

    // d) Получаем его сертификат
    СертСтрукт = НайтиСертификатСотрудника(Сотр);
    Если СертСтрукт = Неопределено Тогда
        Возврат Новый HTTPСервисОтвет(400, "У сотрудника не задан или не найден крипто-сертификат");
    КонецЕсли;

    // e) Декодируем PDF из Base64
    БДанные = ПолучитьДвоичныеДанныеИзСтроки(Данные.Получить("pdfBase64"), КодировкаТекста.UTF8);
	
	Док = Неопределено;
	
	Если (Данные.Получить("docType") = "vacationRequest") тогда
		Док = LK_Utils.ПолучитьИзОбъектаПоГуид(Документы.LK_ЗаявкаНаОтпуск, Данные.Получить("docGUID"));
	конецЕсли;
	
	Если Док = Неопределено тогда
		Возврат Новый HTTPСервисОтвет(400, "Документ не найден");
	КонецЕсли;
	
	ВременноеХранилище = ПоместитьВоВременноеХранилище(БДанные);
	
	ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
	ПараметрыФайла.Автор = Сотр;
	ПараметрыФайла.ВладелецФайлов = Док;
	ПараметрыФайла.ИмяБезРасширения = "Заявление на отпуск";
	ПараметрыФайла.РасширениеБезТочки = "pdf";
	
	// ПрисоедФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ВременноеХранилище); 
	Подписант = Новый Структура();
	Подписант.Вставить("Отпечаток", СертСтрукт.Отпечаток); 
	
	ПараметрыСертификата = ПодготовитьПараметрыСертификата(СертСтрукт.Ссылка);
	Штамп = ЭлектроннаяПодпись.ШтампВизуализацииЭлектроннойПодписи(ПараметрыСертификата.СертификатКриптографии, ТекущаяДата());
	ПодписьPDF = Новый ОписаниеПодписиPDF;
	ПодписьPDF.Имя = "ПодписьДокумента";
	ПодписьPDF.Сертификат = ПараметрыСертификата.СертификатКриптографии;
	ПодписьPDF.ТипПодписи = ТипПодписиPDF.Утверждающая;
	ПодписьPDF.БлокировкаДокумента = Истина;
	
	Подпись = СервисКриптографии.Подписать(ВременноеХранилище, Подписант, "GOST3410");
	
	// f) Создаём менеджер криптографии
    // Если пароль хранится в хранилище — подгружаем
    Хран = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
        Сотр.СертификатПодписи, "ПаролиСертификатов"
    );

    // g) Готовим штамп и описание подписи
    Штамп = ЭлектроннаяПодпись.ШтампВизуализацииЭлектроннойПодписи(
        СертСтрукт.КриптоСертификат,
        ТекущаяДата()
    );
    ОП = Новый ОписаниеПодписиPDF;
    ОП.Имя                = "Signature";
    ОП.Сертификат         = СертСтрукт.КриптоСертификат;
    ОП.ТипПодписи         = ТипПодписиPDF.Утверждающая;
    ОП.БлокировкаДокумента= Истина;

    // h) Пишем подпись в PDF
    //ЗП = Новый ЗаписьPDF(ИмяФайла);
    //ЗП.ЗаписатьПодпись(Мен, ОП, Штамп);
    //ЗП.Закрыть();

    // i) Кодируем обратно в Base64 и отдаем
    //РС = Новый ДвоичныеДанные(ИмяФайла);
    //SignedBase64 = LK_Utils.СтрокаВBase64(РС);

    //Р = Новый Структура;
    //Р.Вставить("signedPdfBase64", SignedBase64);
    //Возврат LK_Utils.ОтправитьJSON(Р);
КонецФункции
             